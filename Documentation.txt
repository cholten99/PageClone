Page Clone
++++++++++

Terminology
===========

Throughout this document the person seeking assistance will be referred to as "the User" and the person offering assistance will be referred to as the "the Support Assistant".

Introduction
============

The idea for this simple demonstration came from a phone conversation I had with a very helpful support team member from HMRC when I had issues attempting to fill in their online self-assessment form. At one point during that conversation he said “can you let me know what you are seeing since I can't see your screen”. It occurred to me that the help he was providing could have been immensely improved if he could have seen the same view of their website that I was seeing.

There are a number of existing systems used to “clone” views on remote PCs. The most popular of these include NVC, Windows Desktop Sharing, Skype and Google's Chrome Remote Desktop. The issue with each of these systems is that they are relatively complex to install and configure, often require the User to login using a separate non-GDS identity management system and, most critically, they share the entire desktop of the remote machine.

In this use-case I was concerned at the prospect of whole-desktop sharing as it is possible that the User could have other windows open on their desktop which contained personal or private information such as bank details.

Instead, I surmised that it would be possible just to “clone” the contents of a particular web page or set of pages that the User required help with. This would require zero installation or configuration on the part of the User, remove the need for them to log into any non-GDS identity system and eliminate the possibility of the Support Assistant accidentally viewing any personal or private data.

The system can theoretically be configured to have minimal database and network resource needs (including loading the majority of needed Javascript on the fly) and, beyond initial development and training, has almost zero associated costs.

Using the demonstration
=======================

Step 1 : The User
-----------------

* Go to : http://bowsy.me.uk/PageClone/INeedHelp/
* The User will see a simple simulation of a form used to enter information to order a tax disc
* Filling in the forms and pressing the Next button enables the User to navigate through the prototype
* At any stage clicking on the Request Help button at the bottom of the page will raise a support session request
* At that time the "Request Help" button will be replaced by a statement containing the support request ID and that the help session is pending
* In a real scenario the User would be asked to log into the system using IDA, if they haven't done so already, to identify themselves to the system - they would then either contact an appropriate AD provider or the AD provider could call them (if they have previously registered for 'call-back')
* The Support Assistant can now see a list of open calls containing the request from the User and select it to open the Remote Tab

Step 2 : The Support User
-------------------------

* Go to : http://bowsy.me.uk/PageClone/HelpGuy/
* The Support User will see a simple simulation of a support assistant login page for tax disk registration
* Enter any name and press return
* The Support User will now see the queue of waiting help requests if there are any in the queue
* The list of waiting requests will updated automatically as new calls are added by Users
* Clicking on one of the Session Keywords will open the real-time updated Remote Tab that shows the page the User is currently seeing as well as updating the User's page to show the name of the person assisting them
* Opening the Remote Tab for the session will remote it from the list of open calls
* In future their may be a way for the Support Assistant to request other Assistants to be added to the session or for it to be handed off to another Assistant

Step 3: The Remote Tab
----------------------

* This tab opens automatically and shows the page the User is seeing, and is updated in real time including mouse movement, mouse clicking, scrolling, etc
* A red box shows the 'viewport' of the User (the size of their screen)
* All form fields are set to read only and highlighted in red
* At the end of the support session the Support Assistant closes this window manually

A quick word on language choice
===============================

* The entire of this prototype is developed in HTML, CSS and Javascript. The cloud service Firebase is extensively used to store data and provide notifications of changes. By using that system it removed the need to write any 'back end' code. 
* In a real system there any many options as how the data may be stored and moved. I suggest full investigation into the use of WebSockets and WebRTC when interfacing with sufficiently modern web browsers.
* It is fully acknowledged that there is no security in this prototype.

Github
======

The sources for this prototype can be found at : https://github.com/cholten99/PageClone

A quick word on the data
========================

Rather than go through the whole of the data configuration the reader is encouraged to read the comments in the code and, while testing the system, to look at Firebase to see how it is updated. The Firebase visualisation tool for this data store is here : https://blazing-fire-4598.firebaseio.com/.

Code layout
===========

The code is laid out in three folders:
* INeedHelp : The HTML pages and code used by the User
* HelpGuy : The HTML page and code used by the Support Assistant
* RemoteTab : The HTML page and code used to create a “clone” tab of the page currently being viewed by the User

How it works
============

Interested parties are encouraged to read the code as it is short and heavily commented. Please contact David Durant (david.durant@digital.cabinet-office.gov.uk) if you have any questions.

Issues and suggestions for improvement
======================================

* Navigation between pages is handled by a browser cookie. This is reset in Javascript when the first page for the User is loaded. The code checks specifically for that hard-coded URL
* There is none of the error handling in place in the prototype that would have to be included in a production version of the system
* There are no security features such as controlled access to the data store, https, logging, etc implemented in the prototype
* The system is only minimally tested - much more rigorours needs to be implemented - especially for different screen resolutions for User and Support Assistant
* The system would ideally be integrated into the GDS IDA system
* Investigation could be made to use this prototype as a basis for providing the same service for *any* web page (using iFrames, URL re-writing on a back-end server, etc) but I suspect it wouldn't work (cookie issues, etc)
* As stated above investigation into WebSockets and WebRTC could make this process much easier and more efficient - only falling back on this method for Users with older browsers
